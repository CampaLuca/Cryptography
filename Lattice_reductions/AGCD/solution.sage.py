

# This file was *autogenerated* from the file AGCD/solution.sage
from sage.all_cmdline import *   # import sage library

_sage_const_1 = Integer(1); _sage_const_0 = Integer(0); _sage_const_406612341 = Integer(406612341); _sage_const_552092054 = Integer(552092054); _sage_const_475395575 = Integer(475395575); _sage_const_538700529 = Integer(538700529); _sage_const_256 = Integer(256); _sage_const_2 = Integer(2); _sage_const_19 = Integer(19); _sage_const_779830132241441617767717 = Integer(779830132241441617767717); _sage_const_849824224537324100834415 = Integer(849824224537324100834415); _sage_const_769124183710968506661470 = Integer(769124183710968506661470); _sage_const_20 = Integer(20); _sage_const_44 = Integer(44)
def agcd_iterative(values, error_bound, agcd_lower_bound):
    for error in range(error_bound+_sage_const_1 ):
        comparison = _sage_const_1 
        for e in range(error_bound+_sage_const_1 ):
            comparison = (values[_sage_const_1 ] - e)
            temp_g = gcd(values[_sage_const_0 ] - error, comparison)
            if temp_g > agcd_lower_bound:
                found = True
                for val in values:
                    if ((val % temp_g) > error_bound):
                        found = False
                        break
                if found:
                    return temp_g


def agcd_lattice_reduction(values, error_bound, agcd_lower_bound):
    matrix = []
    
    first_row = [error_bound]
    for val in values[_sage_const_1 :]:
        first_row.append(val)
    matrix.append(first_row)

    for i in range(len(values)-_sage_const_1 ):
        r = [_sage_const_0 ]
        for j in range(len(values)-_sage_const_1 ):
            if i == j:
                r.append(-values[_sage_const_0 ])
            else:
                r.append(_sage_const_0 )
    
        matrix.append(r)

    M = Matrix(ZZ, matrix)
    M = M.LLL()

    # k_0 * error_bound
    k_0 = abs(M[_sage_const_0 ][_sage_const_0 ]) // error_bound
    e_0 = values[_sage_const_0 ] % k_0
    g_0 = (values[_sage_const_0 ] - e_0) // k_0

    # test

    found = True
    for val in values:
        if ((val % g_0) > error_bound):
            found = False
            break
    if found:
        return g_0

    

values = [_sage_const_406612341 , _sage_const_552092054 , _sage_const_475395575 , _sage_const_538700529 ]
error_bound = _sage_const_256 
agcd_lower_bound = _sage_const_2 **_sage_const_19 
print(agcd_iterative(values, error_bound, agcd_lower_bound))
print(agcd_lattice_reduction(values, error_bound, agcd_lower_bound))

values = [_sage_const_779830132241441617767717 , _sage_const_849824224537324100834415 , _sage_const_769124183710968506661470 ]
error_bound = _sage_const_2 **_sage_const_20 
agcd_lower_bound = _sage_const_2 **_sage_const_44 -_sage_const_1 
print(agcd_lattice_reduction(values, error_bound, agcd_lower_bound))


