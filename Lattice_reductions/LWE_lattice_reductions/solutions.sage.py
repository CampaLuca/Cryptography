

# This file was *autogenerated* from the file LWE_lattice_reductions/solutions.sage
from sage.all_cmdline import *   # import sage library

_sage_const_450641563487779293 = Integer(450641563487779293); _sage_const_694687155559959235 = Integer(694687155559959235); _sage_const_640414019905402608 = Integer(640414019905402608); _sage_const_625091559276079839 = Integer(625091559276079839); _sage_const_531292929089255040 = Integer(531292929089255040); _sage_const_488513044848580334 = Integer(488513044848580334); _sage_const_436598477407299264 = Integer(436598477407299264); _sage_const_788840658061274236 = Integer(788840658061274236); _sage_const_683162938106715125 = Integer(683162938106715125); _sage_const_441912350441357861 = Integer(441912350441357861); _sage_const_293698316236608693 = Integer(293698316236608693); _sage_const_375316172392126472 = Integer(375316172392126472); _sage_const_642405524269050701 = Integer(642405524269050701); _sage_const_52046178926626512 = Integer(52046178926626512); _sage_const_831648591138671219 = Integer(831648591138671219); _sage_const_585738748500155906 = Integer(585738748500155906); _sage_const_143654143925175737 = Integer(143654143925175737); _sage_const_295277251271888340 = Integer(295277251271888340); _sage_const_496915820315591839 = Integer(496915820315591839); _sage_const_529005046628674700 = Integer(529005046628674700); _sage_const_808567031958047798 = Integer(808567031958047798); _sage_const_313762609282878047 = Integer(313762609282878047); _sage_const_158381867262999712 = Integer(158381867262999712); _sage_const_846575464611793916 = Integer(846575464611793916); _sage_const_820214329690843049 = Integer(820214329690843049); _sage_const_73913735308977080 = Integer(73913735308977080); _sage_const_515628590905192992 = Integer(515628590905192992); _sage_const_979964345632012860 = Integer(979964345632012860); _sage_const_817724933247745702 = Integer(817724933247745702); _sage_const_761231328019211454 = Integer(761231328019211454); _sage_const_484789461522931092 = Integer(484789461522931092); _sage_const_596838860613292569 = Integer(596838860613292569); _sage_const_894085069044114974 = Integer(894085069044114974); _sage_const_595954562618619366 = Integer(595954562618619366); _sage_const_336245846597532957 = Integer(336245846597532957); _sage_const_679698887598407603 = Integer(679698887598407603); _sage_const_210463951896256373 = Integer(210463951896256373); _sage_const_645458415684352292 = Integer(645458415684352292); _sage_const_427068879908942731 = Integer(427068879908942731); _sage_const_471722315483170792 = Integer(471722315483170792); _sage_const_244191133696759058 = Integer(244191133696759058); _sage_const_813793769665211326 = Integer(813793769665211326); _sage_const_643409882687269805 = Integer(643409882687269805); _sage_const_88181371059015784 = Integer(88181371059015784); _sage_const_489678354814487618 = Integer(489678354814487618); _sage_const_674379146501885068 = Integer(674379146501885068); _sage_const_605030378417192442 = Integer(605030378417192442); _sage_const_433211727276064312 = Integer(433211727276064312); _sage_const_144091903666248920 = Integer(144091903666248920); _sage_const_359059091514879474 = Integer(359059091514879474); _sage_const_480449885574481608 = Integer(480449885574481608); _sage_const_657940710123348027 = Integer(657940710123348027); _sage_const_700356236010556887 = Integer(700356236010556887); _sage_const_641978349406289443 = Integer(641978349406289443); _sage_const_776300559663948335 = Integer(776300559663948335); _sage_const_866026433468621380 = Integer(866026433468621380); _sage_const_958280943795123948 = Integer(958280943795123948); _sage_const_839913963995057945 = Integer(839913963995057945); _sage_const_837229970732540317 = Integer(837229970732540317); _sage_const_99270364192500612 = Integer(99270364192500612); _sage_const_743874839681128954 = Integer(743874839681128954); _sage_const_103871756095741433 = Integer(103871756095741433); _sage_const_70379080357261348 = Integer(70379080357261348); _sage_const_649318167191701391 = Integer(649318167191701391); _sage_const_700163220542957782 = Integer(700163220542957782); _sage_const_289921683234847509 = Integer(289921683234847509); _sage_const_927575203816962172 = Integer(927575203816962172); _sage_const_463728073666578224 = Integer(463728073666578224); _sage_const_490034238805511857 = Integer(490034238805511857); _sage_const_459241303828096479 = Integer(459241303828096479); _sage_const_82536196524085608 = Integer(82536196524085608); _sage_const_355241643193628989 = Integer(355241643193628989); _sage_const_39486894846894614 = Integer(39486894846894614); _sage_const_765132939070448714 = Integer(765132939070448714); _sage_const_82260773308556104 = Integer(82260773308556104); _sage_const_782031442384319258 = Integer(782031442384319258); _sage_const_32818526394001115 = Integer(32818526394001115); _sage_const_275667058752038593 = Integer(275667058752038593); _sage_const_487053750117474490 = Integer(487053750117474490); _sage_const_383240484219549718 = Integer(383240484219549718); _sage_const_962928952258318161 = Integer(962928952258318161); _sage_const_266169968591652750 = Integer(266169968591652750); _sage_const_262067598225823137 = Integer(262067598225823137); _sage_const_135108085692520924 = Integer(135108085692520924); _sage_const_760760582019301455 = Integer(760760582019301455); _sage_const_110524378418861275 = Integer(110524378418861275); _sage_const_473539681181804913 = Integer(473539681181804913); _sage_const_333026391605346841 = Integer(333026391605346841); _sage_const_461278535512335585 = Integer(461278535512335585); _sage_const_15691311473649746 = Integer(15691311473649746); _sage_const_10 = Integer(10); _sage_const_18 = Integer(18); _sage_const_3 = Integer(3); _sage_const_0 = Integer(0)
A = [[_sage_const_450641563487779293 , _sage_const_694687155559959235 , _sage_const_640414019905402608 , _sage_const_625091559276079839 , _sage_const_531292929089255040 ],
[_sage_const_488513044848580334 , _sage_const_436598477407299264 , _sage_const_788840658061274236 , _sage_const_683162938106715125 , _sage_const_441912350441357861 ],
[_sage_const_293698316236608693 , _sage_const_375316172392126472 , _sage_const_642405524269050701 , _sage_const_52046178926626512 , _sage_const_831648591138671219 ],
[_sage_const_585738748500155906 , _sage_const_143654143925175737 , _sage_const_295277251271888340 , _sage_const_496915820315591839 , _sage_const_529005046628674700 ],
[_sage_const_808567031958047798 , _sage_const_313762609282878047 , _sage_const_158381867262999712 , _sage_const_846575464611793916 , _sage_const_820214329690843049 ],
[_sage_const_73913735308977080 , _sage_const_515628590905192992 , _sage_const_979964345632012860 , _sage_const_817724933247745702 , _sage_const_761231328019211454 ],
[_sage_const_484789461522931092 , _sage_const_596838860613292569 , _sage_const_894085069044114974 , _sage_const_595954562618619366 , _sage_const_336245846597532957 ],
[_sage_const_679698887598407603 , _sage_const_210463951896256373 , _sage_const_645458415684352292 , _sage_const_427068879908942731 , _sage_const_471722315483170792 ],
[_sage_const_244191133696759058 , _sage_const_813793769665211326 , _sage_const_643409882687269805 , _sage_const_88181371059015784 , _sage_const_489678354814487618 ],
[_sage_const_674379146501885068 , _sage_const_605030378417192442 , _sage_const_433211727276064312 , _sage_const_144091903666248920 , _sage_const_359059091514879474 ],
[_sage_const_480449885574481608 , _sage_const_657940710123348027 , _sage_const_700356236010556887 , _sage_const_641978349406289443 , _sage_const_776300559663948335 ],
[_sage_const_866026433468621380 , _sage_const_958280943795123948 , _sage_const_839913963995057945 , _sage_const_837229970732540317 , _sage_const_99270364192500612 ],
[_sage_const_743874839681128954 , _sage_const_103871756095741433 , _sage_const_70379080357261348 , _sage_const_649318167191701391 , _sage_const_700163220542957782 ],
[_sage_const_289921683234847509 , _sage_const_927575203816962172 , _sage_const_463728073666578224 , _sage_const_490034238805511857 , _sage_const_459241303828096479 ],
[_sage_const_82536196524085608 , _sage_const_355241643193628989 , _sage_const_39486894846894614 , _sage_const_765132939070448714 , _sage_const_82260773308556104 ]]

b = [_sage_const_782031442384319258 , _sage_const_32818526394001115 , _sage_const_275667058752038593 ,
_sage_const_487053750117474490 , _sage_const_383240484219549718 , _sage_const_962928952258318161 ,
_sage_const_266169968591652750 , _sage_const_262067598225823137 , _sage_const_135108085692520924 ,
_sage_const_760760582019301455 , _sage_const_110524378418861275 , _sage_const_473539681181804913 ,
_sage_const_333026391605346841 , _sage_const_461278535512335585 , _sage_const_15691311473649746 ]

p = _sage_const_10 **_sage_const_18  + _sage_const_3 


def Babai_closest_vector3(B, target):
    M = B.LLL()
    print(M.dimensions())
    G = M.gram_schmidt()[_sage_const_0 ]
    print(G.dimensions())
    small = target
    
    for i in reversed(range(G.nrows())):
        l_i = ((small * G[i]) / (G[i] * G[i]))
        round_l_i = l_i.round()
        y_i = round_l_i*M[i]
        small -=  ((l_i - round_l_i)*G[i] + (round_l_i*M[i]))
    return small

def Babai_closest_vector(B, target):
    M = B.LLL()
    print(M.dimensions())
    G = M.gram_schmidt()[_sage_const_0 ]
    print(G.dimensions())
    small = target
    G = G.transpose()
    M = M.transpose()
    for i in reversed(range(M.nrows())):
        c = ((small * G[i]) / (G[i] * G[i])).round()
        small -=  M[i] * c
    return target-small

def Babai_closest_vector2(B, target):
    M = B.LLL()
    G = M.gram_schmidt()[_sage_const_0 ]
    small = target
    vec = []
    
    G = G.transpose()
    M = M.transpose()
    for i in reversed(range(M.nrows())):
        l_i = ((small * G[i]) / (G[i] * G[i]))
        round_l_i = l_i.round()
        y_i = round_l_i*M[i]
        small -=  ((l_i - round_l_i)*G[i] + (round_l_i*M[i]))
        
    return target - small



M = Matrix(A)



rows = len(A)
for i in range(rows):
    temp = []
    for j in range(rows):
        if i == j:
            temp.append(-p)
        else:
            temp.append(_sage_const_0 )
    A[i] = A[i] + temp

b = b #+ [0 for _ in range(5)]

M = Matrix(A).transpose()

U, V, T = M.smith_form()

B = Matrix(b).transpose()

closest = Babai_closest_vector3(U, vector(b))
S = Matrix(GF(p), list(closest)).transpose()
print(B-S)



# for el in M*S-B:
#     print(el)
#     if (el[0]%p) > 10^7 and (el[0]%p) < (p-10^7):
#         print("ok")
# A = [[450641563487779293, 694687155559959235, 640414019905402608, 625091559276079839, 531292929089255040],
# [488513044848580334, 436598477407299264, 788840658061274236, 683162938106715125, 441912350441357861],
# [293698316236608693, 375316172392126472, 642405524269050701, 52046178926626512, 831648591138671219],
# [585738748500155906, 143654143925175737, 295277251271888340, 496915820315591839, 529005046628674700],
# [808567031958047798, 313762609282878047, 158381867262999712, 846575464611793916, 820214329690843049],
# [73913735308977080, 515628590905192992, 979964345632012860, 817724933247745702, 761231328019211454],
# [484789461522931092, 596838860613292569, 894085069044114974, 595954562618619366, 336245846597532957],
# [679698887598407603, 210463951896256373, 645458415684352292, 427068879908942731, 471722315483170792],
# [244191133696759058, 813793769665211326, 643409882687269805, 88181371059015784, 489678354814487618],
# [674379146501885068, 605030378417192442, 433211727276064312, 144091903666248920, 359059091514879474],
# [480449885574481608, 657940710123348027, 700356236010556887, 641978349406289443, 776300559663948335],
# [866026433468621380, 958280943795123948, 839913963995057945, 837229970732540317, 99270364192500612],
# [743874839681128954, 103871756095741433, 70379080357261348, 649318167191701391, 700163220542957782],
# [289921683234847509, 927575203816962172, 463728073666578224, 490034238805511857, 459241303828096479],
# [82536196524085608, 355241643193628989, 39486894846894614, 765132939070448714, 82260773308556104]]

# b = [782031442384319258, 32818526394001115, 275667058752038593,
# 487053750117474490, 383240484219549718, 962928952258318161,
# 266169968591652750, 262067598225823137, 135108085692520924,
# 760760582019301455, 110524378418861275, 473539681181804913,
# 333026391605346841, 461278535512335585, 15691311473649746]

# M = Matrix(A)
# print(M.nrows())
# print(S.nrows())

# solution = M.solve_right(S)
# print(solution)


# M = Matrix(GF(p), A)
# B = Matrix(GF(p), b).transpose()

# for el in M*solution-B:
#     print(el)
#     if (el[0]%p) > 10^7 and (el[0]%p) < (p-10^7):
#         print("ok")


