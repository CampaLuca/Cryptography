A = [[450641563487779293, 694687155559959235, 640414019905402608, 625091559276079839, 531292929089255040],
[488513044848580334, 436598477407299264, 788840658061274236, 683162938106715125, 441912350441357861],
[293698316236608693, 375316172392126472, 642405524269050701, 52046178926626512, 831648591138671219],
[585738748500155906, 143654143925175737, 295277251271888340, 496915820315591839, 529005046628674700],
[808567031958047798, 313762609282878047, 158381867262999712, 846575464611793916, 820214329690843049],
[73913735308977080, 515628590905192992, 979964345632012860, 817724933247745702, 761231328019211454],
[484789461522931092, 596838860613292569, 894085069044114974, 595954562618619366, 336245846597532957],
[679698887598407603, 210463951896256373, 645458415684352292, 427068879908942731, 471722315483170792],
[244191133696759058, 813793769665211326, 643409882687269805, 88181371059015784, 489678354814487618],
[674379146501885068, 605030378417192442, 433211727276064312, 144091903666248920, 359059091514879474],
[480449885574481608, 657940710123348027, 700356236010556887, 641978349406289443, 776300559663948335],
[866026433468621380, 958280943795123948, 839913963995057945, 837229970732540317, 99270364192500612],
[743874839681128954, 103871756095741433, 70379080357261348, 649318167191701391, 700163220542957782],
[289921683234847509, 927575203816962172, 463728073666578224, 490034238805511857, 459241303828096479],
[82536196524085608, 355241643193628989, 39486894846894614, 765132939070448714, 82260773308556104]]

b = [782031442384319258, 32818526394001115, 275667058752038593,
487053750117474490, 383240484219549718, 962928952258318161,
266169968591652750, 262067598225823137, 135108085692520924,
760760582019301455, 110524378418861275, 473539681181804913,
333026391605346841, 461278535512335585, 15691311473649746]

p = 10^18 + 3


def Babai_closest_vector3(B, target):
    M = B.LLL()
    print(M.dimensions())
    G = M.gram_schmidt()[0]
    print(G.dimensions())
    small = target
    
    for i in reversed(range(G.nrows())):
        l_i = ((small * G[i]) / (G[i] * G[i]))
        round_l_i = l_i.round()
        y_i = round_l_i*M[i]
        small -=  ((l_i - round_l_i)*G[i] + (round_l_i*M[i]))
    return small

def Babai_closest_vector(B, target):
    M = B.LLL()
    print(M.dimensions())
    G = M.gram_schmidt()[0]
    print(G.dimensions())
    small = target
    G = G.transpose()
    M = M.transpose()
    for i in reversed(range(M.nrows())):
        c = ((small * G[i]) / (G[i] * G[i])).round()
        small -=  M[i] * c
    return target-small

def Babai_closest_vector2(B, target):
    M = B.LLL()
    G = M.gram_schmidt()[0]
    small = target
    vec = []
    
    G = G.transpose()
    M = M.transpose()
    for i in reversed(range(M.nrows())):
        l_i = ((small * G[i]) / (G[i] * G[i]))
        round_l_i = l_i.round()
        y_i = round_l_i*M[i]
        small -=  ((l_i - round_l_i)*G[i] + (round_l_i*M[i]))
        
    return target - small



M = Matrix(A)



rows = len(A)
for i in range(rows):
    temp = []
    for j in range(rows):
        if i == j:
            temp.append(-p)
        else:
            temp.append(0)
    A[i] = A[i] + temp

b = b #+ [0 for _ in range(5)]

M = Matrix(A).transpose()

U, V, T = M.smith_form()

B = Matrix(b).transpose()

closest = Babai_closest_vector3(U, vector(b))
S = Matrix(GF(p), list(closest)).transpose()
print(B-S)



# for el in M*S-B:
#     print(el)
#     if (el[0]%p) > 10^7 and (el[0]%p) < (p-10^7):
#         print("ok")
# A = [[450641563487779293, 694687155559959235, 640414019905402608, 625091559276079839, 531292929089255040],
# [488513044848580334, 436598477407299264, 788840658061274236, 683162938106715125, 441912350441357861],
# [293698316236608693, 375316172392126472, 642405524269050701, 52046178926626512, 831648591138671219],
# [585738748500155906, 143654143925175737, 295277251271888340, 496915820315591839, 529005046628674700],
# [808567031958047798, 313762609282878047, 158381867262999712, 846575464611793916, 820214329690843049],
# [73913735308977080, 515628590905192992, 979964345632012860, 817724933247745702, 761231328019211454],
# [484789461522931092, 596838860613292569, 894085069044114974, 595954562618619366, 336245846597532957],
# [679698887598407603, 210463951896256373, 645458415684352292, 427068879908942731, 471722315483170792],
# [244191133696759058, 813793769665211326, 643409882687269805, 88181371059015784, 489678354814487618],
# [674379146501885068, 605030378417192442, 433211727276064312, 144091903666248920, 359059091514879474],
# [480449885574481608, 657940710123348027, 700356236010556887, 641978349406289443, 776300559663948335],
# [866026433468621380, 958280943795123948, 839913963995057945, 837229970732540317, 99270364192500612],
# [743874839681128954, 103871756095741433, 70379080357261348, 649318167191701391, 700163220542957782],
# [289921683234847509, 927575203816962172, 463728073666578224, 490034238805511857, 459241303828096479],
# [82536196524085608, 355241643193628989, 39486894846894614, 765132939070448714, 82260773308556104]]

# b = [782031442384319258, 32818526394001115, 275667058752038593,
# 487053750117474490, 383240484219549718, 962928952258318161,
# 266169968591652750, 262067598225823137, 135108085692520924,
# 760760582019301455, 110524378418861275, 473539681181804913,
# 333026391605346841, 461278535512335585, 15691311473649746]

# M = Matrix(A)
# print(M.nrows())
# print(S.nrows())

# solution = M.solve_right(S)
# print(solution)


# M = Matrix(GF(p), A)
# B = Matrix(GF(p), b).transpose()

# for el in M*solution-B:
#     print(el)
#     if (el[0]%p) > 10^7 and (el[0]%p) < (p-10^7):
#         print("ok")

